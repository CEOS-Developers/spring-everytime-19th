name: Deploy Development Server

## parking0 브랜치에 push되면 실행
on:
  push:
    branches: [ "parking0" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v3

      ## 여러분이 사용하는 버전을 사용하세요
      - name: Set up JDK 17           # 가상환경에 JDK 17 세팅하기
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## 1. gradle build
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 2. 도커 이미지 만들기 & push
      - name: Build Docker Image
        run: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker build -t parking0/spring .
            docker push parking0/spring

      # 3. 원격 접속 & 이미지 pull & 컨테이너 생성
      - name: Remote SSH & Pull Image & Run Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          #passphrase: ${{ secrets.PASSPHRASE }}
          port: 22
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull parking0/spring
              docker run -d -p 8080:8080 parking0/spring
            
            
            
            
          
            
            ## 여러분이 원하는 경로로 이동합니다.
                    cd /home/ubuntu/
            
            ## .env 파일을 생성합니다.
                    sudo touch .env
                    echo "${{ secrets.ENV_VARS }}" | sudo tee .env > /dev/null
            
            ## docker-compose.yaml 파일을 생성합니다.
                    sudo touch docker-compose.yaml
                    echo "${{ vars.DOCKER_COMPOSE }}" | sudo tee docker-compose.yaml > /dev/null
            
            ## docker-compose를 실행합니다.
                    sudo chmod 666 /var/run/docker.sock
                    sudo docker rm -f $(docker ps -qa)
                    sudo docker pull my-repo/my-web-image
                    sudo docker pull my-repo/my-nginx-image
                    docker-compose -f docker-compose.yaml --env-file ./.env up -d
                    docker image prune -f